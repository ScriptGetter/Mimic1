local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

if not LocalPlayer or not LocalPlayer.Character then
    LocalPlayer.CharacterAdded:Wait()
end

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local RunService = game:GetService("RunService")

local debounce = false
local function onChatted(message)
    if debounce then return end
    debounce = true
    local normalizedMessage = message:lower():gsub("%s+", "")
    if string.find(normalizedMessage, "dynamic") then
        keypress(0xA3)
    end
    task.wait(1)
    debounce = false
end
LocalPlayer.Chatted:Connect(onChatted)

for i, v in pairs(game.Workspace:GetDescendants()) do
    if v:IsA("ProximityPrompt") then
        v.HoldDuration = 0
    end
end

local function isPlayerAlive()
    return Character and Character:FindFirstChild("Humanoid") and Character.Humanoid.Health > 0
end
LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)
local function executeIfAlive(callback)
    if isPlayerAlive() then
        callback()
    else
        warn("Player is not alive.")
    end
end

--[[local isMovementEnabled = _G.SpeedToggle
local desiredSpeed = _G.SpeedValue
local function getMovementDirection()
    return Character.Humanoid.MoveDirection
end
local function resolveCollisions(currentPosition, nextPosition, moveDirection)
    local halfSize = Vector3.new(1, 2, 1)
    local regionStart = nextPosition - halfSize
    local regionEnd = nextPosition + halfSize
    local region = Region3.new(regionStart, regionEnd)
    local parts = workspace:FindPartsInRegion3WithIgnoreList(region, {Character}, 10)
    for _, part in ipairs(parts) do
        local partPosition = part.Position
        local directionToPart = (partPosition - currentPosition).Unit
        local alignment = directionToPart:Dot(moveDirection.Unit)
        if alignment > 0.5 then
            return currentPosition
        end
    end
    return nextPosition
end
local function onRenderStep()
    if not isMovementEnabled then return end
    local moveDirection = getMovementDirection()
    if moveDirection.Magnitude > 0 then
        local deltaPosition = moveDirection * desiredSpeed * RunService.RenderStepped:Wait()
        local nextPosition = HumanoidRootPart.Position + deltaPosition
        local resolvedPosition = resolveCollisions(HumanoidRootPart.Position, nextPosition, moveDirection)
        HumanoidRootPart.CFrame = CFrame.new(resolvedPosition, resolvedPosition + moveDirection)
    end
end
RunService.RenderStepped:Connect(onRenderStep)]]

local Window = Fluent:CreateWindow({
    Title = "Egloo" .. Fluent.Version,
    SubTitle = "Halloween Trials Part 1",
    TabWidth = 120,
    Size = UDim2.fromOffset(480, 360),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.E -- Used when theres no MinimizeKeybind
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "Main" }),
}

local Options = Fluent.Options

Tabs.Main:AddButton({
        Title = "Win",
        Description = "Instant Win",
        Callback = function()
        local function getPumpkinCount()
            local player = game.Players.LocalPlayer
            local backpack = player:WaitForChild("Backpack")
            local pumpkinCount = 0
            for _, item in pairs(backpack:GetChildren()) do
                if item.Name:lower() == "pumpkin" then
                    pumpkinCount = pumpkinCount + 1
                end
            end
            return pumpkinCount
        end
        local function teleportAndCheck(previousCFrame, nextCFrame, proximityPrompt)
            local initialPumpkinCount = getPumpkinCount()
            HumanoidRootPart.CFrame = previousCFrame
            task.wait(0.18)
            fireproximityprompt(proximityPrompt)
            task.wait(0.42)
            local currentPumpkinCount = getPumpkinCount()    
            if currentPumpkinCount > initialPumpkinCount then
                HumanoidRootPart.CFrame = nextCFrame
            elseif currentPumpkinCount == initialPumpkinCount then
                teleportAndCheck(previousCFrame, nextCFrame, proximityPrompt)
            end
        end
        local function fireBurnerPrompt()
            for i = 1, 3 do
                task.wait(0.18)
                fireproximityprompt(workspace.Map.Well.Burner.ProximityPrompt)
            end
        end
        executeIfAlive(function()
            teleportAndCheck(
                game.Workspace.GameInfo.PuzzleItems.GrabItem:FindFirstChildOfClass("MeshPart").CFrame,
                game.Workspace.GameInfo.PuzzleItems:GetChildren()[2]:FindFirstChildOfClass("MeshPart").CFrame,
                workspace.GameInfo.PuzzleItems.GrabItem.ProximityPrompt
            )
            task.wait(0.42)
            teleportAndCheck(
                game.Workspace.GameInfo.PuzzleItems:GetChildren()[2]:FindFirstChildOfClass("MeshPart").CFrame,
                game.Workspace.GameInfo.PuzzleItems:GetChildren()[3]:FindFirstChildOfClass("MeshPart").CFrame,
                workspace.GameInfo.PuzzleItems:GetChildren()[2].ProximityPrompt
            )
            task.wait(0.42)
            teleportAndCheck(
                game.Workspace.GameInfo.PuzzleItems:GetChildren()[3]:FindFirstChildOfClass("MeshPart").CFrame,
                game.Workspace.Map.Well.Burner.CFrame,
                workspace.GameInfo.PuzzleItems:GetChildren()[3].ProximityPrompt
            )
            task.wait(0.42)
            if getPumpkinCount() == 3 then
                HumanoidRootPart.CFrame = game.Workspace.Map.Well.Burner.CFrame
                fireBurnerPrompt()
            end
        end)
        end
    })
    
Tabs.Main:AddButton({
        Title = "Collect All Candy",
        Description = "Will Able to collect all candy around the map",
        Callback = function()
        executeIfAlive(function()
            local function interactWithItem(item, HumanoidRootPart)
                if item:IsA("MeshPart") and item:FindFirstChild("ProximityPrompt") then
                    HumanoidRootPart.CFrame = item.CFrame
                    task.wait(0.18)
                    fireproximityprompt(item.ProximityPrompt)
                    task.wait(0.38)
                end
            end
            local candyModel = workspace.Candy
            if candyModel and candyModel:FindFirstChild("Candy") then
                HumanoidRootPart.CFrame = candyModel.Candy.CFrame
                task.wait(0.18)
                fireproximityprompt(candyModel.Candy.ProximityPrompt)
                task.wait(0.38)
            elseif not candyModel:FindFirstChild("Candy") then
            end
            if candyModel and candyModel:GetChildren() then
                local candyChildren = candyModel:GetChildren()
                for i, child in ipairs(candyChildren) do
                    if child:IsA("MeshPart") then
                        child.CanCollide = false
                        interactWithItem(child, HumanoidRootPart)
                    end
                end
            end
            HumanoidRootPart.CFrame = CFrame.new(-358.411743, -19.9798203, -317.774628, 0.999872208, 0, 0.0159859657, 0, 1, 0, -0.0159859657, 0, 0.999872208)
        end)
        end
    })
    
Tabs.Main:AddButton({
        Title = "FullBright",
        Description = "Will able to see dark places",
        Callback = function()
         --[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
if not _G.FullBrightExecuted then

	_G.FullBrightEnabled = false

	_G.NormalLightingSettings = {
		Brightness = game:GetService("Lighting").Brightness,
		ClockTime = game:GetService("Lighting").ClockTime,
		FogEnd = game:GetService("Lighting").FogEnd,
		GlobalShadows = game:GetService("Lighting").GlobalShadows,
		Ambient = game:GetService("Lighting").Ambient
	}

	game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
		if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
			_G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").Brightness = 1
		end
	end)

	game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
		if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
			_G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").ClockTime = 12
		end
	end)

	game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
		if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
			_G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").FogEnd = 786543
		end
	end)

	game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
		if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
			_G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").GlobalShadows = false
		end
	end)

	game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
		if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
			_G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
			if not _G.FullBrightEnabled then
				repeat
					wait()
				until _G.FullBrightEnabled
			end
			game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
		end
	end)

	game:GetService("Lighting").Brightness = 1
	game:GetService("Lighting").ClockTime = 12
	game:GetService("Lighting").FogEnd = 786543
	game:GetService("Lighting").GlobalShadows = false
	game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)

	local LatestValue = true
	spawn(function()
		repeat
			wait()
		until _G.FullBrightEnabled
		while wait() do
			if _G.FullBrightEnabled ~= LatestValue then
				if not _G.FullBrightEnabled then
					game:GetService("Lighting").Brightness = _G.NormalLightingSettings.Brightness
					game:GetService("Lighting").ClockTime = _G.NormalLightingSettings.ClockTime
					game:GetService("Lighting").FogEnd = _G.NormalLightingSettings.FogEnd
					game:GetService("Lighting").GlobalShadows = _G.NormalLightingSettings.GlobalShadows
					game:GetService("Lighting").Ambient = _G.NormalLightingSettings.Ambient
				else
					game:GetService("Lighting").Brightness = 1
					game:GetService("Lighting").ClockTime = 12
					game:GetService("Lighting").FogEnd = 786543
					game:GetService("Lighting").GlobalShadows = false
					game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
				end
				LatestValue = not LatestValue
			end
		end
	end)
end

_G.FullBrightExecuted = true
_G.FullBrightEnabled = not _G.FullBrightEnabled   
        end
    })
